//Universidad del Valle de Guatemala
//Electrónica Digital 2
//Javier Pineda (22682) Julio Pérez (221023)
//Proyecto - 3 Implementación de UART, TFT, I2C y SPI.
//Librerías incluidas en el código.

/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ili9341.h"
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer[100];
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t receivedValue;
uint8_t uartRxBuffer [1];
extern uint8_t high[];
extern uint8_t medium[];
extern uint8_t lowp[];
char pressStr[20]; // Buffer para almacenar la cadena del voltaje
char adcValueStr[4]; // Buffer para almacenar la cadena del valor
char bufferValor[100];  // Buffer para almacenar el valor recibido desde el ESP
uint8_t valor[10];      // Buffer de valor para la UART, dependiendo de lo que se espere recibir del ESP
uint8_t btnPressed = 0; // Variable para almacenar cuál botón ha sido presionado
uint32_t tiempoActual;
char br1[100];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_UART5_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void guardar_sd(void);
void floatToString(float value, char *buffer, int precision);
void uint8ToString(uint8_t value, char *buffer);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();

    if (current_time - last_interrupt_time > 50) { // 50 ms de debounce
        if (GPIO_Pin == BTN_Read_Pin) {
            // Si el botón BTN_Read es presionado, se indica que se desea medir
            btnPressed = 1;
        } else if (GPIO_Pin == BTN_Save_Pin) {
            // Si el botón BTN_Save es presionado, se indica que se quiere guardar
            btnPressed = 2;
        }
    }
    last_interrupt_time = current_time;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_UART5_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */

	LCD_Init();

	LCD_Clear(0x00);
	FillRect(0, 0, 319, 239, 0xFFFF);


	char message6[] = "\r\nPresione BTN 1 para medir.\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)message6, strlen(message6), HAL_MAX_DELAY);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
	    if (btnPressed) {
	        // Enviar solicitud para leer el potenciómetro correspondiente
	        uint8_t request = (btnPressed == 1) ? 1 : 2; // Solicitar potenciómetro 1 o 2

	        // Transmitir el valor de 'request' para depuración
	        //char requestMessage[30];
	        //snprintf(requestMessage, sizeof(requestMessage), "Valor de request: %d\r\n", request);
	        //HAL_UART_Transmit(&huart2, (uint8_t*)requestMessage, strlen(requestMessage), HAL_MAX_DELAY);

	        // Enviar solicitud para leer el sensor
	        HAL_UART_Transmit(&huart5, &request, sizeof(request), HAL_MAX_DELAY);


	        // Esperar un breve tiempo antes de recibir el valor

	        HAL_Delay(1); 
	        // Leer el valor del sensor correspondiente a través de UART
	        HAL_UART_Receive(&huart5, uartRxBuffer, sizeof(uartRxBuffer), HAL_MAX_DELAY);
	 
	        HAL_Delay (100);
	        // Verificar si el botón presionado es 1
	        	        if (btnPressed == 1) {
	        	            // Imprimir todos los valores recibidos para depuración
	        	            /*for (int i = 0; i < sizeof(uartRxBuffer); i++) {
	        	                char tempMessage[50];
	        	                snprintf(tempMessage, sizeof(tempMessage), "uartRxBuffer[%d]: %d\r\n", i, uartRxBuffer[i]);
	        	                HAL_UART_Transmit(&huart2, (uint8_t*)tempMessage, strlen(tempMessage), HAL_MAX_DELAY);
	        	            }*/

	     
	        	            receivedValue = uartRxBuffer[0];  // Leer el primer byte del buffer
	        	            float adcValuef = receivedValue;
	        	            float presion = (adcValuef/255)*1100;

	        	            floatToString(presion, pressStr, 2); // 2 decimales
	        	            // Transmitir el texto "Valor recibido:" en la primera línea
	        	            char message1[] = "Valor recibido:\r\n";
	        	            HAL_UART_Transmit(&huart2, (uint8_t*)message1, strlen(message1), HAL_MAX_DELAY);

	        	            // Unir el valor recibido con la unidad "hPa"
	        	            char message2[30]; // Aumentar el tamaño para incluir " hPa" y el valor
	        	            snprintf(message2, sizeof(message2), "%s hPa\r\n", voltageStr);

	        	            // Transmitir el valor completo
	        	            HAL_UART_Transmit(&huart2, (uint8_t*)message2, strlen(message2), HAL_MAX_DELAY);

	        	            // Mensaje de instrucción: "Presione BTN 2 para guardar el valor."
	        	            char message3[] = "\r\nPresione BTN 2 para guardar el valor.\r\n";
	        	            HAL_UART_Transmit(&huart2, (uint8_t*)message3, strlen(message3), HAL_MAX_DELAY);

	        	            // Determinar el rango de presión
	        	            if (presion >= 1015.0f && receivedValue <= 1100.0f) {
	        	                // Presión alta
	        	                LCD_Clear(0x00);
	        	                LCD_Bitmap(0, 0, 320, 240, high);

	        	                char bufferFinal1[30];  

	        	                    // Copiar el contenido de voltageStr a bufferFinal1
	        	                    strcpy(bufferFinal1, pressStr);

	        	                    // Concatenar " hPa" al final
	        	                    strcat(bufferFinal1, " hPa");

	        	                    // Imprimir el texto "Presion medida: " en tamaño 2 y color blanco sin fondo
	        	                    LCD_Print("Presion medida: ", 20, 100, 2, 0x0000, 0xFFFF);

	        	                    // Imprimir el valor convertido en texto
	        	                    LCD_Print(bufferFinal1, 20, 140, 2, 0x0000, 0xFFFF);
	        	                }
	        	            else if (presion >= 900.0f && receivedValue <= 1015.0f) {
	        	            	        	                // Presión alta
	        	            	        	                LCD_Clear(0x00);
	        	            	        	                LCD_Bitmap(0, 0, 320, 240, medium);

	        	            	        	                char bufferFinal2[30];  

	        	            	        	                    // Copiar el contenido de pressStr a bufferFinal1
	        	            	        	                    strcpy(bufferFinal2, pressStr);

	        	            	        	                    // Concatenar " hPa" al final
	        	            	        	                    strcat(bufferFinal2, " hPa");

	        	            	        	                    // Imprimir el texto "Presion medida: " en tamaño 2 y color blanco sin fondo
	        	            	        	                    LCD_Print("Presion medida: ", 20, 100, 2, 0x0000, 0xFFFF);

	        	            	        	                    // Imprimir el valor convertido en texto
	        	            	        	                    LCD_Print(bufferFinal2, 20, 140, 2, 0x0000, 0xFFFF);
	        	            	        	                }
	        	            else{
	        	            	        	     // Presión alta
	        	            	        	    LCD_Clear(0x00);
	        	            	        	    LCD_Bitmap(0, 0, 320, 240, lowp);

	        	            	        	   char bufferFinal3[30]; 

	        	            	        	     // Copiar el contenido de voltageStr a bufferFinal1
	        	            	        	      strcpy(bufferFinal3, voltageStr);

	        	            	        	     // Concatenar " hPa" al final
	        	            	        	      strcat(bufferFinal3, " hPa");

	        	            	        	      // Imprimir el texto "Presion medida: " en tamaño 2 y color blanco sin fondo
	        	            	        	       LCD_Print("Presion medida: ", 20, 100, 2, 0x0000, 0xFFFF);

	        	            	        	        // Imprimir el valor convertido en texto
	        	            	        	         LCD_Print(bufferFinal3, 20, 140, 2, 0x0000, 0xFFFF);
	        	         

	        	        } else {
	        	        	 // El usuario ha presionado BTN_Save, enviar "2" por UART al esclavo
	        	        	// Mensaje de instrucción: "Presione BTN 2 para guardar el valor."
	        	        					char message4[] = "\r\n Enviando comando...\r\n";
	        	        					HAL_UART_Transmit(&huart2, (uint8_t*)message4, strlen(message4), HAL_MAX_DELAY);
	        	        			        //HAL_UART_Transmit(&huart5, (uint8_t *)"2", 1, HAL_MAX_DELAY);
	        	        			        float adcValuef = receivedValue;
	        	        			        float presion = (adcValuef/255)*1100;

	        	        			        floatToString(presion, pressStr, 2); // 2 decimales

	        	        			    	// El usuario ha presionado BTN_Save, guardar el valor en la SD
	        	        			        guardar_sd();

	        	        			        char message5[] = "\r\n Valor guardado en SD.\r\n";
	        	        			        HAL_UART_Transmit(&huart2, (uint8_t*)message5, strlen(message5), HAL_MAX_DELAY);

	        	        			      
	        	        			        HAL_Delay(1000); // Espera 1 segundo antes de reiniciar el ciclo
	        	        			    	char message7[] = "\r\nPresione BTN 1 para medir.\r\n";
	        	        			        HAL_UART_Transmit(&huart2, (uint8_t*)message7, strlen(message7), HAL_MAX_DELAY);


	        		        }
	        btnPressed = 0; // Resetear el estado del botón

	        }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN_Read_Pin BTN_Save_Pin */
  GPIO_InitStruct.Pin = BTN_Read_Pin|BTN_Save_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void guardar_sd(void){
//Montar SD
fres = f_mount(&fs, "/", 0);
if (fres == FR_OK) {
//transmit_uart("Montar. OK\n");
// HAL_UART_Transmit(&huart2, "Montar. OK\n", 13, 100);
} else if (fres != FR_OK) {
//transmit_uart("Montar. Fail\n");
// HAL_UART_Transmit(&huart2, "Montar. Fail\n", 15, 100);
}

// Abrir archivo
fres = f_open(&fil, "Proy3.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);

if (fres == FR_OK){
//transmit_uart("Abrir. OK\n");
// HAL_UART_Transmit(&huart2, "Abrir. OK\n", 12, 100);
} else if (fres != FR_OK) {
//transmit_uart("Abrir. Fail\n");
//HAL_UART_Transmit(&huart2, "Abrir. Fail\n", 14, 100);
}


//Escribir algún contenido en el archivo
// for (uint8_t i = 0; i<3; i++){
tiempoActual = HAL_GetTick();
sprintf(br1, "Valor medido: %s. Guardado en: %lu ms\n\r\n", pressStr,tiempoActual);
f_puts(br1, &fil);
//}


//Cerrar archivo
fres = f_close(&fil);

if (fres == FR_OK){
//transmit_uart("Cerrar. OK\n");
//HAL_UART_Transmit(&huart2, "Cerrar. OK\n", 13, 100);
} else if (fres != FR_OK) {
//transmit_uart("Cerrar. Fail\n");
//HAL_UART_Transmit(&huart2, "Cerrar. Fail\n", 15, 100);
}

/*
// Abrir archivo
fres = f_open(&fil, "Proy3.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);

if (fres == FR_OK){
//transmit_uart("Abrir. OK\n");
HAL_UART_Transmit(&huart2, "Abrir. OK\n", 12, 100);
} else if (fres != FR_OK) {
//transmit_uart("Abrir. Fail\n");
HAL_UART_Transmit(&huart2, "Abrir. Fail\n", 14, 100);
}


// Leer algún contenido del archivo
while (f_gets(buffer, sizeof(buffer), &fil)){
char mRd[100];
sprintf(mRd, "%s", buffer);
//transmit_uart(mRd);
HAL_UART_Transmit(&huart2, mRd, sizeof(mRd), 100);
}HAL_Delay(5);


//Cerrar archivo
fres = f_close(&fil);

if (fres == FR_OK){
//transmit_uart("Cerrar. OK\n");
HAL_UART_Transmit(&huart2, "Cerrar. OK\n", 13, 100);
} else if (fres != FR_OK) {
//transmit_uart("Cerrar. Fail\n");
HAL_UART_Transmit(&huart2, "Cerrar. Fail\n", 15, 100);
}
*/
//Desmontar SD
fres = f_mount(NULL, "",1);

if (fres == FR_OK){
//transmit_uart("Desmontar. OK\n");
// HAL_UART_Transmit(&huart2, "Desm OK\n", 10, 100);
} else if (fres != FR_OK) {
//transmit_uart("Desmontar. Fail\n");
// HAL_UART_Transmit(&huart2, "Desm Fail\n", 12, 100);
}
}


void floatToString(float value, char *buffer, int precision) {
    int intPart = (int)value;
    float fracPart = value - intPart;

    // Convierte la parte entera
    int pos = 0;
    if (intPart < 0) {
        buffer[pos++] = '-';
        intPart = -intPart;
    }

    // Convierte la parte entera a cadena
    int intTemp = intPart;
    char intBuffer[10]; // Buffer temporal para la parte entera
    int intPos = 0;

    // Manejar el caso de 0
    if (intTemp == 0) {
        intBuffer[intPos++] = '0';
    } else {
        do {
            intBuffer[intPos++] = (intTemp % 10) + '0';
            intTemp /= 10;
        } while (intTemp > 0);
    }

    // Añadir la parte entera al buffer
    while (intPos > 0) {
        buffer[pos++] = intBuffer[--intPos];
    }

    // Añadir la parte fraccionaria
    if (precision > 0) {
        buffer[pos++] = '.';
        for (int i = 0; i < precision; i++) {
            fracPart *= 10;
            int fracInt = (int)fracPart;
            buffer[pos++] = fracInt + '0';
            fracPart -= fracInt;

            // Redondear si es necesario
            if (i == precision - 1 && fracPart >= 0.5) {
                buffer[pos - 1] += 1; // Sumar 1 a la última cifra
            }
        }
    }

    buffer[pos] = '\0'; // Terminar la cadena
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
